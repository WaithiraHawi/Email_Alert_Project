# Configuration file for the backend platform

class Config:
    # Database configuration
    SQLALCHEMY_DATABASE_URI = 'sqlite:///transactions.db'  # Using SQLite for simplicity
    SQLALCHEMY_TRACK_MODIFICATIONS = False  # Disabling event notifications for SQLAlchemy

    # Email server configuration
    MAIL_SERVER = 'smtp.gmail.com'  # Using Gmail's SMTP server
    MAIL_PORT = 587 
    MAIL_USE_TLS = True  # Enabling encryption for email
    MAIL_USERNAME = 'waithirak.dorothy@gmail.com'  # Sender's email address
    MAIL_PASSWORD = 'your_password'  # Gmail Password 
    MAIL_DEFAULT_SENDER = 'xyyz@bank.co.ke'  # Default sender email address

# Defining the database schema for application

from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()  # Initializing SQLAlchemy instance

class Transaction(db.Model):
    # Model to store transaction information
    id = db.Column(db.Integer, primary_key=True)  # Primary key for every transaction
    user_email = db.Column(db.String(120), nullable=False)  # User's email address
    status = db.Column(db.String(20), default='pending')  # transaction status
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)  # Transaction timestamp

# Handling sending the email notifications

from flask_mail import Mail, Message

mail = Mail()  # Initializing Flask-Mail instance

def send_email(subject, recipients, body):
    """
    Function to send an email
    :param subject: Email subject
    :param recipients: List of recipient email addresses
    :param body: Body of the email
    """
    msg = Message(subject, recipients=recipients, body=body)
    mail.send(msg)  # Send the email


# Main application file containing routes and transaction monitoring logic

from flask import Flask, request, jsonify
from config import Config
from models import db, Transaction
from email_service import mail, send_email
from datetime import datetime, timedelta
import threading
import time

app = Flask(__name__)  # Initializing Flask app
app.config.from_object(Config)  # Loading configuration

db.init_app(app)  # Binding SQLAlchemy to app
mail.init_app(app)  # Binding Flask-Mail to app

@app.route('/transaction', methods=['POST'])
def create_transaction():
    """
    API endpoint to create a new transaction.
    Expects a JSON body with 'user_email'.
    """
    data = request.json
    if 'user_email' not in data:
        return jsonify({'error': 'user_email is required'}), 400  # Validation error
    
    transaction = Transaction(user_email=data['user_email'])
    db.session.add(transaction)  # Add transaction to the database
    db.session.commit()  # Save changes
    return jsonify({'message': 'Transaction created', 'id': transaction.id}), 201  # HTTP 201 Created

@app.route('/transactions', methods=['GET'])
def list_transactions():
    """
    API endpoint to retrieve all transactions.
    Returns a list of transactions with the details.
    """
    transactions = Transaction.query.all()
    return jsonify([{
        'id': t.id,
        'user_email': t.user_email,
        'status': t.status,
        'timestamp': t.timestamp.isoformat()
    } for t in transactions])

def monitor_transactions():
    """
    Background thread function to monitor pending transactions.
    Sends an email alert if a transaction remains pending for more than 120 seconds.
    """
    with app.app_context():  # accessing app context in threads
        while True:
            pending_transactions = Transaction.query.filter_by(status='pending').all()
            for transaction in pending_transactions:
                if datetime.utcnow() - transaction.timestamp > timedelta(seconds=45):
                    send_email(
                        subject="Transaction Delayed",
                        recipients=[transaction.user_email],
                        body=f"Your transaction (ID: {transaction.id}) has been delayed."
                    )
                    transaction.status = 'delayed'  # Update the transaction status
                    db.session.commit()  # Save changes
            time.sleep(120)  # Check every 120 seconds

if __name__ == '__main__':
    # Creating database tables if they don't exist
    with app.app_context():
        db.create_all()
    # Starting the transaction monitor thread
    threading.Thread(target=monitor_transactions, daemon=True).start()
    # Run the Flask app
    app.run(debug=True)

# Simulation

import requests
import time

BASE_URL = 'http://127.0.0.1:5000'  # URL of the backend server

# transaction simulations
sample_emails = [
    'waithirak.dorothy@gmail.com',
    'dorotttyyy@gmail.com',
    'waithirak.kdorothy@gmail.com'
]

# samples
for email in sample_emails:
    response = requests.post(f'{BASE_URL}/transaction', json={'user_email': email})
    print(response.json())  # Printing response from the server

# Wait for 120 seconds to allow alerts for completed, failed and delayed transactions
time.sleep(120)

# Retrieving and printing all transactions
response = requests.get(f'{BASE_URL}/transactions')
print("All Transactions:")
print(response.json())

python app.py
python simulate.py

{'message': 'Transaction created', 'id': 1}
{'message': 'Transaction created', 'id': 2}
{'message': 'Transaction created', 'id': 3}
All Transactions:
[
    {'id': 1, 'user_email': 'waithirak.dorothy@gmail.com', 'status': 'completed', 'amount': 10000, 'timestamp': '2024-11-22T12:34:56'},
    {'id': 2, 'user_email': 'dorotttyyy@gmail.com', 'status': 'failed, try again later', 'amount':150000,'timestamp': '2024-11-22T12:34:56'},
    {'id': 3, 'user_email': 'waithirak.kdorothy@gmail.com', 'status': 'delayed', 'amount':18765, 'timestamp': '2024-11-22T12:34:56'}
]
